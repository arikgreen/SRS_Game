<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="_Metamodels" xml:space="preserve">
    <value>Metamodels</value>
  </data>
	<data name="Metamodels_Description_" xml:space="preserve">
		<value>Metamodels describe all available types of elements. Inheritance structure is shown in the tree view. Types marked with italic are abstract.</value>
	</data>
	<data name="MetamodelsHint" xml:space="preserve">
		<value>Types marked with italic are abstract.</value>
	</data>
	<data name="Name" xml:space="preserve">
		<value>Name</value>
	</data>
	<data name="Description" xml:space="preserve">
		<value>Description:</value>
	</data>
	<data name="Assembly" xml:space="preserve">
		<value>Assembly</value>
	</data>
	<data name="DisplayName" xml:space="preserve">
		<value>Display name</value>
	</data>
	<data name="AbstractClass" xml:space="preserve">
		<value>Abstract class</value>
	</data>
	<data name="MetaclassProperties" xml:space="preserve">
		<value>Metaclass properties</value>
	</data>
	<data name="Details" xml:space="preserve">
		<value>Details</value>
	</data>
	<data name="Metaclass_Properties_Hint_" xml:space="preserve">
		<value>Properties marked with italic are inherited.</value>
	</data>
	<data name="Metaclass_Properties_Description_" xml:space="preserve">
		<value>Metaclass properies describe values that model element can hold.</value>
	</data>
	<data name="PropertyType" xml:space="preserve">
		<value>Property type</value>
	</data>
	<data name="EnumType_Values_Hint_" xml:space="preserve">
		<value>Enum values</value>
	</data>
	<data name="EnumValuesHint" xml:space="preserve">
		<value>Enum values can have integer values specified.</value>
	</data>
	<data name="EnumType_Values_Description_" xml:space="preserve">
		<value>Enum values are named values that can be assigned to a property</value>
	</data>
	<data name="EnumValue" xml:space="preserve">
		<value>Value (integer)</value>
	</data>
	<data name="BaseType" xml:space="preserve">
		<value>Base type</value>
	</data>
	<data name="ReferenceDefaultConstructorError" xml:space="preserve">
		<value>Reference default constructor not implemented.</value>
	</data>
	<data name="NewMetaclass" xml:space="preserve">
		<value>New metaclass</value>
	</data>
	<data name="EditMetaclass" xml:space="preserve">
		<value>Edit metaclass definition</value>
	</data>
	<data name="NewMetamodel" xml:space="preserve">
		<value>New metamodel</value>
	</data>
	<data name="NewEnumType" xml:space="preserve">
		<value>New enum type</value>
	</data>
	<data name="EditType" xml:space="preserve">
		<value>Edit type definition</value>
	</data>
	<data name="EditMetamodel" xml:space="preserve">
		<value>Edit metamodel properties</value>
	</data>
	<data name="DeleteMetamodel" xml:space="preserve">
		<value>Delete metamodel</value>
	</data>
	<data name="DeleteMetaclass" xml:space="preserve">
		<value>Delete metaclass</value>
	</data>
	<data name="DeleteType" xml:space="preserve">
		<value>Delete type</value>
	</data>
	<data name="Namespace" xml:space="preserve">
		<value>Namespace</value>
	</data>
	<data name="GenerateCode" xml:space="preserve">
		<value>Generate code</value>
	</data>
	<data name="MetamodelCompiled_1" xml:space="preserve">
		<value>Metamodel '{0}' compiled. Library '{1}' created.</value>
	</data>
	<data name="MetamodelCompilationErrors_1" xml:space="preserve">
		<value>Metamodel '{0}' compilation errors</value>
	</data>
	<data name="NewSubclass" xml:space="preserve">
		<value>New subclass</value>
	</data>
	<data name="EditEnumType" xml:space="preserve">
		<value>Edit enum type</value>
	</data>
	<data name="DeleteEnumType" xml:space="preserve">
		<value>Delete enum type</value>
	</data>
	<data name="DeleteMetaclassConfirm_1" xml:space="preserve">
		<value>Are you sure to delete metaclass {0}?</value>
	</data>
	<data name="DeleteEnumTypeConfirm_1" xml:space="preserve">
		<value>Are you sure to delete enum type {0}?</value>
	</data>
	<data name="DeleteTypeConfirm_1" xml:space="preserve">
		<value>Are you sure to delete type {0}?</value>
	</data>
	<data name="NewEnumValue" xml:space="preserve">
		<value>New enum value</value>
	</data>
	<data name="DeleteEnumValue" xml:space="preserve">
		<value>Delete enum value</value>
	</data>
	<data name="DeleteEnumValueConfirm_1" xml:space="preserve">
		<value>Are you sure to delete enum value {0}?</value>
	</data>
	<data name="EditEnumValue" xml:space="preserve">
		<value>Edit enum value</value>
	</data>
	<data name="Name_Description_" xml:space="preserve">
		<value>Unique identifier. Only latin letters are accepted.</value>
	</data>
	<data name="Namespace_Description_" xml:space="preserve">
		<value>A sequence of identifiers separated by dots. Distinguishes names of elements defined in this model from elements defined in other models.</value>
	</data>
	<data name="DisplayName_Description_" xml:space="preserve">
		<value>Display name is used in documents e.g. in specification tables. It can contain spaces and Unicode letters.</value>
	</data>
	<data name="Description_Description_" xml:space="preserve">
		<value>Explanation for designers. It can contain references to other elements. </value>
	</data>
	<data name="AssemblyName" xml:space="preserve">
		<value>Assembly name</value>
	</data>
	<data name="Assembly_Description_" xml:space="preserve">
		<value>Assembly is a DLL that contains this model.</value>
	</data>
	<data name="AssemblyName_Description_" xml:space="preserve">
		<value>Name of a DLL that contains this model.</value>
	</data>
	<data name="BaseType_Description_" xml:space="preserve">
		<value>A type from which this class inherits properties.</value>
	</data>
	<data name="AbstractClass_Description_" xml:space="preserve">
		<value>An abstract class cannot create elements, but can be used as a base type by other classes.</value>
	</data>
	<data name="PropertyType_Description_" xml:space="preserve">
		<value>A type of data available in this property.</value>
	</data>
	<data name="MultiProperty" xml:space="preserve">
		<value>List of</value>
	</data>
	<data name="MultiProperty_Description_" xml:space="preserve">
		<value>A property accepts many values.</value>
	</data>
	<data name="EditClassProperty" xml:space="preserve">
		<value>Edit class property</value>
	</data>
	<data name="DeleteClassProperty" xml:space="preserve">
		<value>Delete class property</value>
	</data>
	<data name="DeleteClassPropertyConfirm_1" xml:space="preserve">
		<value>Are you sure to delete class property '{0}'?</value>
	</data>
	<data name="NewClassProperty" xml:space="preserve">
		<value>New class property</value>
	</data>
	<data name="EnumValue_Description_" xml:space="preserve">
		<value>Integer value assigned to a name.</value>
	</data>
	<data name="Modeling" xml:space="preserve">
		<value>Modeling</value>
	</data>
</root>